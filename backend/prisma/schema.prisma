generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model categories {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(255)
  description String     @db.VarChar(255)
  products    products[]

  @@index([description], map: "description")
  @@index([name], map: "name")
}

model orders {
  id          Int           @id @default(autoincrement())
  user_id     Int
  total       Float?        @db.Float
  order_date  DateTime?     @default(now()) @db.DateTime(0)
  order_items order_items[]
  users       users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "orders_ibfk_1")

  @@index([user_id], map: "user_id")
  @@index([order_date], map: "order_date")
}

model products {
  id          Int           @id @default(autoincrement())
  name        String?       @db.VarChar(255)
  description String?       @db.MediumText
  price       Float?        @db.Float
  rating      Int?          @default(0) @db.TinyInt
  image       String?       @db.VarChar(255)
  stock       Int?          @db.TinyInt
  category_id Int?
  order_items order_items[]
  categories  categories?   @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "products_ibfk_1")
  reviews     reviews[]

  @@index([category_id], map: "category_id")
  @@index([name], map: "name")
}

model reviews {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  product_id Int?
  rating     Int?
  review     String?   @db.Text
  timestamp  DateTime? @default(now()) @db.DateTime(0)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "reviews_ibfk_1")
  products   products? @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "reviews_ibfk_2")

  @@index([product_id], map: "product_id")
  @@index([user_id], map: "user_id")
}

model users {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(255)
  age      Int
  email    String    @unique(map: "email") @db.VarChar(255)
  password String    @db.VarChar(255)
  country  String    @db.VarChar(255)
  city     String    @db.VarChar(255)
  address  String    @db.VarChar(255)
  role_id  Int?
  banned   Int       @default(0) @db.TinyInt
  orders   orders[]
  reviews  reviews[]
  tokens   tokens[]

  @@index([role_id], map: "role_id")
}

model order_items {
  id         Int       @id @default(autoincrement())
  order_id   Int?
  product_id Int?
  quantity   Int?
  price      Float?    @db.Float
  orders     orders?   @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_items_ibfk_1")
  products   products? @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "product_ibfk_2")

  @@index([order_id], map: "order_id")
  @@index([product_id], map: "product_id")
}

model tokens {
  id         Int      @id @default(autoincrement())
  token      String   @db.VarChar(255)
  user_id    Int
  expiration DateTime @db.DateTime(0)
  users      users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tokens_ibfk_1")

  @@index([user_id], map: "user_id")
}

model roles {
  id   Int     @id @default(autoincrement())
  name String? @unique(map: "name") @db.VarChar(255)
}
